Index: framework/ChangeLog
===================================================================
--- framework/ChangeLog	(revisión: 104700)
+++ framework/ChangeLog	(copia de trabajo)
@@ -1,3 +1,7 @@
+2008-06-02  Nestor Salceda  <nestor.salceda@gmail.com>
+
+	* Makefile.am: Add the ApplicabilityScope.cs to the framework build.
+
 2008-05-17  Andres G. Aragoneses <aaragoneses@novell.com> 
 
 	* framework.mdp: Fix build.
Index: framework/Makefile.am
===================================================================
--- framework/Makefile.am	(revisión: 104700)
+++ framework/Makefile.am	(copia de trabajo)
@@ -32,6 +32,7 @@
 	Gendarme.Framework/Severity.cs \
 	Gendarme.Framework/Symbols.cs \
 	Gendarme.Framework/SolutionAttribute.cs \
+	Gendarme.Framework/ApplicabilityScope.cs \
 	Gendarme.Framework.Helpers/MethodSignature.cs \
 	Gendarme.Framework.Helpers/MethodSignatures.cs \
 	Gendarme.Framework.Helpers/StackEntryAnalysis.cs \
Index: framework/Gendarme.Framework/ApplicabilityScope.cs
===================================================================
--- framework/Gendarme.Framework/ApplicabilityScope.cs	(revisión: 0)
+++ framework/Gendarme.Framework/ApplicabilityScope.cs	(revisión: 0)
@@ -0,0 +1,35 @@
+//
+// Gendarme.Framework.ApplicabilityScope class
+//
+// Authors:
+//	Néstor Salceda <nestor.salceda@gmail.com>
+//
+// 	(C) 2008 Néstor Salceda
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+namespace Gendarme.Framework {
+	public enum ApplicabilityScope {
+		Visible = 0,
+		NonVisible, 
+		All
+	}
+}
Index: framework/Gendarme.Framework/IRule.cs
===================================================================
--- framework/Gendarme.Framework/IRule.cs	(revisión: 104700)
+++ framework/Gendarme.Framework/IRule.cs	(copia de trabajo)
@@ -78,5 +78,11 @@
 		/// </summary>
 		/// <param name="runner">Runner that will execute the rule during analysis.</param>
 		void Initialize (IRunner runner);
+
+		/// <summary>
+		/// Defines the how the rule are going to be applied to a
+		/// target according its visibility modifier.
+		/// </summary>
+		ApplicabilityScope ApplicabilityScope {get; set;}
 	}
 }
Index: framework/Gendarme.Framework/ChangeLog
===================================================================
--- framework/Gendarme.Framework/ChangeLog	(revisión: 104700)
+++ framework/Gendarme.Framework/ChangeLog	(copia de trabajo)
@@ -1,3 +1,12 @@
+2008-06-02  Nestor Salceda  <nestor.salceda@gmail.com>
+
+	* ApplicabilityScope.cs: New, the enum for codify the different
+	applicability behaviours.
+	* IRule.cs: Added a getter and setter to the rule.
+	* Rule.cs: Added the getter and setter bodies.
+	* Runner.cs: According their applicability scope, the runner runs or not
+	runs the check against a target.
+
 2008-05-27  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* Runner.cs: Whine at the right stream (self-test).
Index: framework/Gendarme.Framework/Rule.cs
===================================================================
--- framework/Gendarme.Framework/Rule.cs	(revisión: 104700)
+++ framework/Gendarme.Framework/Rule.cs	(copia de trabajo)
@@ -44,6 +44,7 @@
 		private string solution;
 		private string url;
 		private Type type;
+		private ApplicabilityScope applicability_scope;
 
 		/// <summary>
 		/// Return true if the rule is currently active, false otherwise.
@@ -158,5 +159,15 @@
 		{
 			this.runner = runner;
 		}
+
+
+		public ApplicabilityScope ApplicabilityScope {
+			get {
+				return applicability_scope;
+			}
+			set {
+				applicability_scope = value;
+			}
+		}
 	}
 }
Index: framework/Gendarme.Framework/Runner.cs
===================================================================
--- framework/Gendarme.Framework/Runner.cs	(revisión: 104700)
+++ framework/Gendarme.Framework/Runner.cs	(copia de trabajo)
@@ -212,7 +212,19 @@
 					continue;
 				currentRule = rule;
 				defectCountBeforeCheck = Defects.Count;
-				rule.CheckType (e.CurrentType);
+				switch (rule.ApplicabilityScope) {
+				case ApplicabilityScope.Visible:
+					if (e.CurrentType.IsVisible ())
+						rule.CheckType (e.CurrentType);
+					break;
+				case ApplicabilityScope.NonVisible:
+					if (!e.CurrentType.IsVisible ())
+						rule.CheckType (e.CurrentType);
+					break;
+				default:
+					rule.CheckType (e.CurrentType);
+					break;
+				}
 			}
 		}
 
@@ -226,7 +238,19 @@
 
 				currentRule = rule;
 				defectCountBeforeCheck = Defects.Count;
-				rule.CheckMethod (e.CurrentMethod);
+				switch (rule.ApplicabilityScope) {
+				case ApplicabilityScope.Visible:
+					if (e.CurrentMethod.IsVisible ())
+						rule.CheckMethod (e.CurrentMethod);
+					break;
+				case ApplicabilityScope.NonVisible:
+					if (!e.CurrentMethod.IsVisible ())
+						rule.CheckMethod (e.CurrentMethod);
+					break;
+				default:
+					rule.CheckMethod (e.CurrentMethod);
+					break;
+				}
 			}
 		}
 
Index: console/ChangeLog
===================================================================
--- console/ChangeLog	(revisión: 104700)
+++ console/ChangeLog	(copia de trabajo)
@@ -1,3 +1,8 @@
+2008-06-02  Nestor Salceda  <nestor.salceda@gmail.com>
+
+	* Settings.cs: Parse the applyTo xml attribute and sets the mode to
+	the rules.
+
 2008-05-30  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* gendarme.xsl: Make lists and defects collapse/hide to ease 
Index: console/Settings.cs
===================================================================
--- console/Settings.cs	(revisión: 104700)
+++ console/Settings.cs	(copia de trabajo)
@@ -87,8 +87,29 @@
 			return (type.ToString () == (interfaceName as string));
 		}
 
-		private int LoadRulesFromAssembly (string assembly, string includeMask, string excludeMask)
+		private static void SetApplicabilityScope (IRule rule, string applicabilityScope) 
 		{
+			switch (applicabilityScope) {
+			case "visible":
+				rule.ApplicabilityScope = ApplicabilityScope.Visible;
+				break;
+			case "nonvisible":
+				rule.ApplicabilityScope = ApplicabilityScope.NonVisible;
+				break;
+			case "all":
+				rule.ApplicabilityScope = ApplicabilityScope.All;
+				break;
+			default:
+				//if the scope is not empty, notify
+				if (!String.IsNullOrEmpty (applicabilityScope))
+					Console.Error.WriteLine ("Unknown scope value '{0}' . Defaulting to 'all'", applicabilityScope);
+				rule.ApplicabilityScope = ApplicabilityScope.All;
+				break;
+			}
+		}
+
+		private int LoadRulesFromAssembly (string assembly, string includeMask, string excludeMask, string applicabilityScope)
+		{
 			int total = 0;
 			Assembly a = Assembly.LoadFile (Path.GetFullPath (assembly));
 			foreach (Type t in a.GetTypes ()) {
@@ -104,7 +125,10 @@
 						continue;
 
 				if (t.FindInterfaces (new TypeFilter (RuleFilter), "Gendarme.Framework.IRule").Length > 0) {
-					runner.Rules.Add ((IRule) Activator.CreateInstance (t));
+					IRule rule = (IRule) Activator.CreateInstance (t);
+					runner.Rules.Add (rule);
+					SetApplicabilityScope (rule, applicabilityScope);
+
 					total++;
 				}
 			}
@@ -182,8 +206,9 @@
 					string include = GetAttribute (assembly, "include", "*");
 					string exclude = GetAttribute (assembly, "exclude", String.Empty);
 					string from = GetFullPath (GetAttribute (assembly, "from", String.Empty));
+					string applicabilityScope = GetAttribute (assembly, "applyTo", String.Empty);
 
-					int n = LoadRulesFromAssembly (from, include, exclude);
+					int n = LoadRulesFromAssembly (from, include, exclude, applicabilityScope);
 					result = (result || (n > 0));
 					if (result) 
 						SetCustomParameters (assembly);
