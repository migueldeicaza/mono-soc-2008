// ObjectTest.cs
//
// Author:
//   Igor Guerrero Fonseca <igfgt1@gmail.com>
//
// Copyright (c) 2008
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

using System;
using System.IO;
using System.IO.Compression;
using Mono.Git.Core;

namespace Mono.Git.Tests
{
	/// <summary>
	/// Here we will store all the tests, this is temporal I believe it'll better
	/// if we use Nunit or something like that
	/// </summary>
	public class ObjectTest
	{
		
		public ObjectTest ()
		{
			// Calling the test of create blob hash validation
			if (!CreateBlobHashTest ()) {
				throw new Exception ("CreateBlobHashTest () -> failed");
			}
			
			Console.WriteLine ("All the test passed :)");
		}
		
		/// <summary>
		/// This test will create a blob using a file that has 
		/// 7ca7efe6dbed6a3a0d73030134521c8b1048e6a7 as a hash string and
		/// a "Hello, World!" content on it the test will compare the hashes
		/// generated by CGit and GitSharp
		/// </summary>
		/// <returns>
		/// Result of the test<see cref="System.Boolean"/>
		/// </returns>
		public static bool CreateBlobHashTest ()
		{
			//Blob b = new Blob ("hello.txt");
			//string hash = Mono.Git.Core.Object.BytesToHexString (b.Id.bytes);
			
			//if (hash != "7ca7efe6dbed6a3a0d73030134521c8b1048e6a7")
			//	return false;
			
			return true;
		}
		
		public static void ByteWriterTest ()
		{
			int num = 259;
			byte[] bytes;
			MemoryStream ms = new MemoryStream ();
			BinaryWriter bw = new BinaryWriter (ms);
			
			bw.Write (num);
			bytes = ms.GetBuffer ();
			
			int tmp = 0;
			
			for (int i = 0; i < 4; i++) {
				tmp += bytes[i] * (int)System.Math.Pow (256, i);
				Console.WriteLine ("#{0}", i);
				Console.WriteLine ("tmp += bytes[i] * (int)System.Math.Pow (256, i);");
				Console.WriteLine ("tmp += {0} * {1}", bytes[i], (int)System.Math.Pow (256, i));
			}
			
			
			
			Console.WriteLine ("{0}, {1}, {2}, {3}", (bytes[0] - '0')*10, (bytes[1] - '0'), (bytes[2] - '0'), (bytes[3] - '0'));
			Console.WriteLine ("Num: {0}", BitConverter.ToInt32 (bytes, 0));
			Console.WriteLine ("Num: {0}", tmp);
		}
		
		public static void ReadGitObj ()
		{
			//FileStream fs = new FileStream ("f1ba39c400cf9fb8b48f652bc05aaa9f087c66cf", FileMode.Open);
			FileStream fs = new FileStream ("4d9a46593467984153457aef51f049af038f59c9", FileMode.Open);
			BinaryReader br = new BinaryReader (fs);
			int len = (int)fs.Length;
			
			byte[] content = br.ReadBytes (len);
			
			Console.WriteLine ("First 2 bytes: {0} {1}", (int)content[0], (int)content[1]);
			Console.WriteLine ("Last 4 bytes: {0}{1}{2}{3}", (int)content[len - 4], (int)content[len - 3], 
			                   (int)content[len - 2], (int)content[len - 1]);
			
//			byte[] dContent = new byte [len - 2];
//			
//			for (int i = 2; i < len; i++)
//				dContent[i - 2] = content[i];
			
			byte[] deflated = Mono.Git.Core.ObjectStore.Decompress (content);
			
			Console.Write ("Header: ");
			foreach (byte b in deflated) {
				if ((char)b == '\0')
					Console.Write ("\n");
				else
					Console.Write ((char)b);
			}
		}
	}
}
