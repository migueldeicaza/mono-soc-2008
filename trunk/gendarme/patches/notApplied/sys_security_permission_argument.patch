Index: RegistryPermission.cs
===================================================================
--- RegistryPermission.cs	(revisión: 110357)
+++ RegistryPermission.cs	(copia de trabajo)
@@ -78,7 +78,7 @@
 		{
 			if (!Enum.IsDefined (typeof (AccessControlActions), control)) {
 				string msg = String.Format (Locale.GetText ("Invalid enum {0}"), control);
-				throw new ArgumentException (msg, "AccessControlActions");
+				throw new ArgumentException (msg, "control");
 			}
 			_state = PermissionState.None;
 			AddPathList (access, control, pathList);
Index: UIPermission.cs
===================================================================
--- UIPermission.cs	(revisión: 110357)
+++ UIPermission.cs	(copia de trabajo)
@@ -79,7 +79,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (UIPermissionClipboard), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "UIPermissionClipboard");
+					throw new ArgumentException (msg, "value");
 				}
 				_clipboard = value;
 			}
@@ -90,7 +90,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (UIPermissionWindow), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "UIPermissionWindow");
+					throw new ArgumentException (msg, "value");
 				}
 				_window = value;
 			}
Index: StrongNameIdentityPermission.cs
===================================================================
--- StrongNameIdentityPermission.cs	(revisión: 110357)
+++ StrongNameIdentityPermission.cs	(copia de trabajo)
@@ -109,7 +109,7 @@
 			if (blob == null)
 				throw new ArgumentNullException ("blob");
 			if ((name != null) && (name.Length == 0))
-				throw new ArgumentException ("name");
+				throw new ArgumentException ("The method is expecting a non null nor empty string.", "name");
 
 			_state = PermissionState.None;
 			_list = new ArrayList ();
Index: IsolatedStoragePermission.cs
===================================================================
--- IsolatedStoragePermission.cs	(revisión: 110357)
+++ IsolatedStoragePermission.cs	(copia de trabajo)
@@ -69,7 +69,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (IsolatedStorageContainment), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "IsolatedStorageContainment");
+					throw new ArgumentException (msg, "value");
 				}
 				m_allowed = value;
 				if (m_allowed == IsolatedStorageContainment.UnrestrictedIsolatedStorage) {
Index: KeyContainerPermissionAccessEntry.cs
===================================================================
--- KeyContainerPermissionAccessEntry.cs	(revisión: 110357)
+++ KeyContainerPermissionAccessEntry.cs	(copia de trabajo)
@@ -81,7 +81,7 @@
 			set {
 				if ((value & KeyContainerPermissionFlags.AllFlags) != 0) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "KeyContainerPermissionFlags");
+					throw new ArgumentException (msg, "value");
 				}
 				_flags = value;
 			}
Index: FileDialogPermission.cs
===================================================================
--- FileDialogPermission.cs	(revisión: 110357)
+++ FileDialogPermission.cs	(copia de trabajo)
@@ -64,7 +64,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (FileDialogPermissionAccess), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "FileDialogPermissionAccess");
+					throw new ArgumentException (msg, "value");
 				}
 				_access = value;
 			}
Index: PublisherIdentityPermission.cs
===================================================================
--- PublisherIdentityPermission.cs	(revisión: 110357)
+++ PublisherIdentityPermission.cs	(copia de trabajo)
@@ -60,7 +60,7 @@
 			get { return x509; }
 			set { 
 				if (value == null)
-					throw new ArgumentNullException ("X509Certificate");
+					throw new ArgumentNullException ("value");
 				x509 = value; 
 			}
 		}
Index: SecurityPermission.cs
===================================================================
--- SecurityPermission.cs	(revisión: 110357)
+++ SecurityPermission.cs	(copia de trabajo)
@@ -67,7 +67,7 @@
 			set {
 				if ((value & SecurityPermissionFlag.AllFlags) != value) {
 					string msg = String.Format (Locale.GetText ("Invalid flags {0}"), value);
-					throw new ArgumentException (msg, "SecurityPermissionFlag");
+					throw new ArgumentException (msg, "value");
 				}
 				flags = value;
 			}
Index: ChangeLog
===================================================================
--- ChangeLog	(revisión: 110358)
+++ ChangeLog	(copia de trabajo)
@@ -1,3 +1,13 @@
+2008-08-13  Néstor Salceda  <nestor.salceda@gmail.com>
+
+	* FileDialogPermission.cs, HostProtectionPermission.cs,
+	IsolatedStoragePermission.cs, KeyContainerPermissionAccessEntry.cs,
+	PrincipalPermission.cs, PublisherIdentityPermission.cs,
+	ReflectionPermission.cs, RegistryPermission.cs,
+	SecurityPermission.cs, StrongNameIdentityPermission.cs,
+	UIPermission.cs, ZoneIdentityPermission.cs: Put the correct values in
+	argument exceptions.  Found using Gendarme.
+
 2008-07-06  Andreas Nahr  <ClassDevelopment@A-SoftTech.com>
 
 	* ReflectionPermissionFlag.cs: Add missing member
Index: PrincipalPermission.cs
===================================================================
--- PrincipalPermission.cs	(revisión: 110357)
+++ PrincipalPermission.cs	(copia de trabajo)
@@ -345,12 +345,12 @@
 		internal int CheckSecurityElement (SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) 
 		{
 			if (se == null)
-				throw new ArgumentNullException (parameterName);
+				throw new ArgumentNullException ("parameterName");
 
 			// Tag is case-sensitive
 			if (se.Tag != "Permission") {
 				string msg = String.Format (Locale.GetText ("Invalid tag {0}"), se.Tag);
-				throw new ArgumentException (msg, parameterName);
+				throw new ArgumentException (msg, "parameterName");
 			}
 
 			// Note: we do not care about the class attribute at 
@@ -375,7 +375,7 @@
 			if ((version < minimumVersion) || (version > maximumVersion)) {
 				string msg = Locale.GetText ("Unknown version '{0}', expected versions between ['{1}','{2}'].");
 				msg = String.Format (msg, version, minimumVersion, maximumVersion);
-				throw new ArgumentException (msg, parameterName);
+				throw new ArgumentException (msg, "parameterName");
 			}
 			return version;
 		}
Index: HostProtectionPermission.cs
===================================================================
--- HostProtectionPermission.cs	(revisión: 110357)
+++ HostProtectionPermission.cs	(copia de trabajo)
@@ -60,7 +60,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (HostProtectionResource), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "HostProtectionResource");
+					throw new ArgumentException (msg, "value");
 				}
 				_resources = value;
 			}
Index: ZoneIdentityPermission.cs
===================================================================
--- ZoneIdentityPermission.cs	(revisión: 110357)
+++ ZoneIdentityPermission.cs	(copia de trabajo)
@@ -129,7 +129,7 @@
 			set {
 				if (!Enum.IsDefined (typeof (SecurityZone), value)) {
 					string msg = String.Format (Locale.GetText ("Invalid enum {0}"), value);
-					throw new ArgumentException (msg, "SecurityZone");
+					throw new ArgumentException (msg, "value");
 				}
 				zone = value;
 			}
Index: ReflectionPermission.cs
===================================================================
--- ReflectionPermission.cs	(revisión: 110357)
+++ ReflectionPermission.cs	(copia de trabajo)
@@ -65,7 +65,7 @@
 			set {
 				if ((value & ReflectionPermissionFlag.AllFlags) != value) {
 					string msg = String.Format (Locale.GetText ("Invalid flags {0}"), value);
-					throw new ArgumentException (msg, "ReflectionPermissionFlag");
+					throw new ArgumentException (msg, "value");
 				}
 
 				flags = value;
@@ -155,7 +155,7 @@
 				else if ((flags & ReflectionPermissionFlag.AllFlags) == ReflectionPermissionFlag.AllFlags)
 					se.AddAttribute ("Flags", "AllFlags");
 				else {
-					string xmlFlags = "";
+					string xmlFlags = String.Empty;
 					if ((flags & ReflectionPermissionFlag.MemberAccess) == ReflectionPermissionFlag.MemberAccess)
 						xmlFlags = "MemberAccess";
 					if ((flags & ReflectionPermissionFlag.ReflectionEmit) == ReflectionPermissionFlag.ReflectionEmit) {
