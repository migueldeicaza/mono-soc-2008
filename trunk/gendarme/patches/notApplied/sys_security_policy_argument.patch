Index: ApplicationTrustCollection.cs
===================================================================
--- ApplicationTrustCollection.cs	(revisión: 110357)
+++ ApplicationTrustCollection.cs	(copia de trabajo)
@@ -151,7 +151,7 @@
 			case ApplicationVersionMatch.MatchExactVersion:
 				break;
 			default:
-				throw new ArgumentException ("versionMatch");
+				throw new ArgumentException ("The method can't found a valid ApplicationVersionMatch.","versionMatch");
 			}
 
 			ApplicationTrustCollection coll = new ApplicationTrustCollection ();
Index: UrlMembershipCondition.cs
===================================================================
--- UrlMembershipCondition.cs	(revisión: 110357)
+++ UrlMembershipCondition.cs	(copia de trabajo)
@@ -193,7 +193,7 @@
 			// no * except for the "lone star" case
 			if (uri.Host.IndexOf ('*') >= 1) {
 				string msg = Locale.GetText ("Invalid * character in url");
-				throw new ArgumentException (msg, "name");
+				throw new ArgumentException (msg, "url");
 			}
 		}
 #endif
Index: SiteMembershipCondition.cs
===================================================================
--- SiteMembershipCondition.cs	(revisión: 110357)
+++ SiteMembershipCondition.cs	(copia de trabajo)
@@ -61,7 +61,7 @@
 			get { return _site; }
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("site");
+					throw new ArgumentNullException ("value");
 				if (!System.Security.Policy.Site.IsValid (value))
 					throw new ArgumentException ("invalid site");
 				_site = value;
Index: CodeGroup.cs
===================================================================
--- CodeGroup.cs	(revisión: 110357)
+++ CodeGroup.cs	(copia de trabajo)
@@ -94,7 +94,7 @@
 			get { return m_membershipCondition; }
 			set {
 				if (null == value)
-					throw new ArgumentException ("value");
+					throw new ArgumentException ("The parameter is null.", "value");
 				m_membershipCondition = value;
 			}
 		}
Index: NetCodeGroup.cs
===================================================================
--- NetCodeGroup.cs	(revisión: 110357)
+++ NetCodeGroup.cs	(copia de trabajo)
@@ -90,7 +90,7 @@
 		public void AddConnectAccess (string originScheme, CodeConnectAccess connectAccess)
 		{
 			if (originScheme == null)
-				throw new ArgumentException ("originScheme");
+				throw new ArgumentException ("The parameter is null.", "originScheme");
 
 			// TODO (2.0) - invalid characters in originScheme
 			if ((originScheme == AbsentOriginScheme) && (connectAccess.Scheme == CodeConnectAccess.OriginScheme)) {
Index: StrongNameMembershipCondition.cs
===================================================================
--- StrongNameMembershipCondition.cs	(revisión: 110357)
+++ StrongNameMembershipCondition.cs	(copia de trabajo)
@@ -86,7 +86,7 @@
                         get { return blob; }
                         set {
                                 if (value == null)
-                                        throw new ArgumentNullException ("PublicKey");
+                                        throw new ArgumentNullException ("value");
 				blob = value;
 			}
 		}
Index: MembershipConditionHelper.cs
===================================================================
--- MembershipConditionHelper.cs	(revisión: 110357)
+++ MembershipConditionHelper.cs	(copia de trabajo)
@@ -39,12 +39,12 @@
 		internal static int CheckSecurityElement (SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) 
 		{
 			if (se == null)
-				throw new ArgumentNullException (parameterName);
+				throw new ArgumentNullException ("parameterName");
 
 			// Tag is case-sensitive
 			if (se.Tag != XmlTag) {
 				string msg = String.Format (Locale.GetText ("Invalid tag {0}, expected {1}."), se.Tag, XmlTag);
-				throw new ArgumentException (msg, parameterName);
+				throw new ArgumentException (msg, "parameterName");
 			}
 
 			// Note: we do not care about the class attribute at 
Index: ApplicationTrust.cs
===================================================================
--- ApplicationTrust.cs	(revisión: 110357)
+++ ApplicationTrust.cs	(copia de trabajo)
@@ -62,7 +62,7 @@
 			get { return _appid; }
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("ApplicationIdentity");
+					throw new ArgumentNullException ("value");
 				_appid = value;
 			}
 		}
@@ -98,7 +98,7 @@
 				throw new ArgumentNullException ("element");
 
 			if (element.Tag != "ApplicationTrust")
-				throw new ArgumentException ("element");
+				throw new ArgumentException ("The tag is different than ApplicationTrust" ,"element");
 
 			string s = element.Attribute ("FullName");
 			if (s != null)
Index: ApplicationSecurityInfo.cs
===================================================================
--- ApplicationSecurityInfo.cs	(revisión: 110357)
+++ ApplicationSecurityInfo.cs	(copia de trabajo)
@@ -53,7 +53,7 @@
 			get { return _evidence; }
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("ApplicationEvidence");
+					throw new ArgumentNullException ("value");
 				_evidence = value;
 			}
 		}
@@ -62,7 +62,7 @@
 			get { return _appid; }
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("ApplicationId");
+					throw new ArgumentNullException ("value");
 				_appid = value;
 			}
 		}
@@ -75,7 +75,7 @@
 			}
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("DefaultRequestSet");
+					throw new ArgumentNullException ("value");
 				_defaultSet = value;
 			}
 		}
@@ -84,7 +84,7 @@
 			get { return _deployid; }
 			set {
 				if (value == null)
-					throw new ArgumentNullException ("DeploymentId");
+					throw new ArgumentNullException ("value");
 				_deployid = value;
 			}
 		}
Index: PublisherMembershipCondition.cs
===================================================================
--- PublisherMembershipCondition.cs	(revisión: 110357)
+++ PublisherMembershipCondition.cs	(copia de trabajo)
@@ -57,7 +57,7 @@
 			// needed to match MS implementation
 			if (certificate.GetHashCode () == 0) {
 #if NET_2_0
-				throw new ArgumentException ("certificate");
+				throw new ArgumentException ("The parameter's GetHashCode is zero.", "certificate");
 #else
 				throw new NullReferenceException ("certificate");
 #endif
Index: ChangeLog
===================================================================
--- ChangeLog	(revisión: 110359)
+++ ChangeLog	(copia de trabajo)
@@ -1,3 +1,15 @@
+2008-08-13  Néstor Salceda  <nestor.salceda@gmail.com>
+
+	* ApplicationDirectory.cs, ApplicationSecurityInfo.cs,
+	ApplicationTrust.cs, ApplicationTrustCollection.cs,
+	CodeGroup.cs, HashMembershipCondition.cs,
+	MembershipConditionHelper.cs, MonoTrustManager.cs,
+	NetCodeGroup.cs, Publisher.cs,
+	PublisherMembershipCondition.cs, Site.cs,
+	SiteMembershipCondition.cs, StrongNameMembershipCondition.cs,
+	Url.cs, UrlMembershipCondition.cs: Put the correct values in argument
+	exceptions.  Found using Gendarme.
+
 2008-07-06  Andreas Nahr  <ClassDevelopment@A-SoftTech.com>
 
 	* ApplicationTrust.cs: Add missing attribute
Index: ApplicationDirectory.cs
===================================================================
--- ApplicationDirectory.cs	(revisión: 110357)
+++ ApplicationDirectory.cs	(copia de trabajo)
@@ -164,7 +164,7 @@
 		{
 			if (appdir.IndexOfAny (Path.InvalidPathChars) != -1) {
 				string msg = Locale.GetText ("Invalid character(s) in directory {0}");
-				throw new ArgumentException (String.Format (msg, appdir), "other");
+				throw new ArgumentException (String.Format (msg, appdir), "appdir");
 			}
 		}
 	}
Index: Publisher.cs
===================================================================
--- Publisher.cs	(revisión: 110357)
+++ Publisher.cs	(copia de trabajo)
@@ -47,7 +47,7 @@
 				throw new ArgumentNullException ("cert");
 #if NET_2_0
 			if (cert.GetHashCode () == 0)
-				throw new ArgumentException ("cert");
+				throw new ArgumentException ("The parameter's GetHashCode method is returning Zero.","cert");
 #endif
 			m_cert = cert;
 		}
@@ -79,7 +79,7 @@
 		{
 			Publisher p = (o as Publisher);
 			if (p == null)
-				throw new ArgumentException ("o", Locale.GetText ("not a Publisher instance."));
+				throw new ArgumentException (Locale.GetText ("not a Publisher instance."), "o");
 			return m_cert.Equals (p.Certificate);
 		}
 	
Index: Url.cs
===================================================================
--- Url.cs	(revisión: 110357)
+++ Url.cs	(copia de trabajo)
@@ -131,7 +131,7 @@
 		private string Prepare (string url) 
 		{
 			if (url == null)
-				throw new ArgumentNullException ("Url");
+				throw new ArgumentNullException ("url");
 			if (url == String.Empty)
 				throw new FormatException (Locale.GetText ("Invalid (empty) Url"));
 
Index: Site.cs
===================================================================
--- Site.cs	(revisión: 110357)
+++ Site.cs	(copia de trabajo)
@@ -48,7 +48,7 @@
 		public Site (string name)
 		{
 			if (name == null)
-				throw new ArgumentNullException ("url");
+				throw new ArgumentNullException ("name");
 			if (!IsValid (name))
 				throw new ArgumentException (Locale.GetText ("name is not valid"));
 			
Index: MonoTrustManager.cs
===================================================================
--- MonoTrustManager.cs	(revisión: 110357)
+++ MonoTrustManager.cs	(copia de trabajo)
@@ -52,7 +52,7 @@
 			if (e == null)
 				throw new ArgumentNullException ("e");
 			if (e.Tag != tag)
-				throw new ArgumentException ("e", Locale.GetText ("Invalid XML tag."));
+				throw new ArgumentException (Locale.GetText ("Invalid XML tag."), "e");
 			// nothing more to do in this case
 		}
 
Index: HashMembershipCondition.cs
===================================================================
--- HashMembershipCondition.cs	(revisión: 110357)
+++ HashMembershipCondition.cs	(copia de trabajo)
@@ -79,7 +79,7 @@
 			}
 			set { 
 				if (value == null)
-					throw new ArgumentNullException ("HashAlgorithm");
+					throw new ArgumentNullException ("value");
 				hash_algorithm = value; 
 			}
 		}
@@ -92,7 +92,7 @@
 			}
 			set { 
 				if (value == null)
-					throw new ArgumentNullException ("HashValue");
+					throw new ArgumentNullException ("value");
 				hash_value = (byte[]) value.Clone ();
 			} 
 		}
